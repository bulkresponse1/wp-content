//layout mixins - start

@mixin mkdTableLayout() {
    position: relative;
    display: table;
    table-layout: fixed;
    height: 100%;
    width: 100%;
}

@mixin mkdTableCellLayout() {
    position: relative;
    display: table-cell;
    height: 100%;
    width: 100%;
    vertical-align: middle;
}

@mixin mkdRelativeHolderLayout() {
    position: relative;
    display: inline-block;
    width: 100%;
    vertical-align: middle;
}

@mixin mkdAbsoluteHolderLayout() {
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

@mixin mkdTypographyLayout() {
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    font-style: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    text-transform: inherit;
}

//layout mixins - end

//transition mixins - start

@mixin mkdTransition($transition-param...) {
    -webkit-transition: $transition-param;
    -moz-transition: $transition-param;
    transition: $transition-param;
}

@mixin mkdTransform($transform-param...) {
    -webkit-transform: $transform-param;
    -moz-transform: $transform-param;
    transform: $transform-param;
}

@mixin mkdAnimation($animation-param...) {
    -webkit-animation: $animation-param;
    -moz-animation: $animation-param;
    animation: $animation-param;
}

@mixin mkdTransformOrigin($animation-param...) {
    -webkit-transform-origin: $animation-param;
    -moz-transform-origin: $animation-param;
    transform-origin: $animation-param;
}

@mixin mkdBckImageStyle() {
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
}

@mixin mkdPlaceholder {
    &::-webkit-input-placeholder {
        @content
    }
    &:-moz-placeholder {
        @content
    }
    &::-moz-placeholder {
        @content
    }
    &:-ms-input-placeholder {
        @content
    }
}

%checkbox-style {
    input[type=checkbox] {
        width: 17px;
        height: 17px;
        top: 0;
        left: 0;
        margin: 0 0 16px;
    }
    input[type=checkbox] + label {
        vertical-align: top;
        display: inline-block;
        pointer-events: none;
        cursor: pointer;
    }
    input[type=checkbox] + label span.mkd-label-text {
        padding-left: 8px;
    }
    input[type=checkbox] + label .mkd-label-view {
        width: 15px;
        height: 15px;
        position: absolute;
        top: 0;
        left: 0;
        cursor: pointer;
        border: 1px solid $default-border-color;
        background-color: $default-background-color;
        border-radius: 2px;
        &:hover {
            cursor: pointer;
        }
    }
    input[type=checkbox] + label .mkd-label-view:after {
        content: '';
        width: 7px;
        height: 7px;
        position: absolute;
        top: 4px;
        left: 4px;
        background-color: $first-main-color;
        opacity: 0;
        @include mkdTransition(opacity 0.3s ease-in-out);
    }

    input[type=checkbox]:checked + label .mkd-label-view:after {
        opacity: 1;
    }
}

//transition mixins - end

/* Button mixins - start */
@mixin mkdButtonDefaultStyle() {
    font-family: inherit;
    position: relative;
    display: inline-block;
    vertical-align: middle;
    width: auto;
    outline: none;
    line-height: 20px;
    font-weight: 500;
    text-transform: capitalize;
    box-sizing: border-box;
    margin: 0;
    @include mkdTransition(color .2s ease-in-out, background-color .2s ease-in-out, border-color .2s ease-in-out);
}

@mixin mkdButtonRoundedShape() {
    border-radius: 2em;
}

@mixin mkdButtonSimpleStyle() {
    padding: 0 !important;
    color: $first-main-color;
    background-color: transparent;
    border: 0;
    vertical-align: middle;
    border-radius: 0;

    .mkd-btn-text {
        display: inline-block;
        vertical-align: middle;
    }

    &:before,
    &:after{
        content: "";
        position: absolute;
        width: 100%;
        left: 0;
        bottom: 0;
        border-bottom: 2px solid #97a8fd;
    }

    &:before {
        transform-origin:right;
        @include mkdTransform(scale(1,1));
        opacity: 1;
    }

    &:after {
        transform-origin:left;
        @include mkdTransform(scale(0,1));
        opacity: 0;
    }

    &:hover {
        &:before {
            @include mkdTransform(scale(0,1));
            opacity: 0;
            @include mkdTransition(opacity .2s ease-in-out .2s,transform .2s ease-in-out);

        }

        &:after {
            @include mkdTransform(scale(1,1));
            opacity: 1;
            @include mkdTransition(transform .2s ease-in-out .25s);
        }
    }
}

@mixin mkdButtonTransparentColor() {
    color: $default-text-color;
    background-color: transparent;
}

@mixin mkdButtonSolidColor() {
    color: #fff;
    background-color: $first-main-color;
    border: 2px solid transparent;
}

@mixin mkdButtonGradientColor() {
    color: #fff;
    background: $first-main-color;
    background: -webkit-linear-gradient(left, $first-main-color 100%, $gradient-lighten-color 50%, $first-main-color 0) ;
    background: -o-linear-gradient(right, $first-main-color 0, $gradient-lighten-color 50%, $first-main-color 100%);
    background: -moz-linear-gradient(right, $first-main-color 0, $gradient-lighten-color 50%, $first-main-color 100%);
    background: linear-gradient(to right, $first-main-color 0, $gradient-lighten-color 50%, $first-main-color 100%);
    background-position: 0;
    background-size: 200% 200% !important; //!important rule added to override inline gradient style
    @include mkdTransition(all 0.3s ease-in-out);

    &:hover {
        background-position: 100% center !important; //!important rule added to override inline gradient style
    }
}



@mixin mkdButtonSolidHoverColor() {
    color: #fff;
    background-color: $solid-hover-button-color;
}

@mixin mkdButtonOutlineColor() {
    color: $first-main-color;
    background-color: transparent;
    border: 2px solid $first-main-color;
}

@mixin mkdButtonOutlineHoverColor() {
    color: #fff;
    background-color: $first-main-color;
    border-color: $first-main-color;
}

@mixin mkdButtonSmallParams() {
    padding: 4px 31px;
    line-height: 21px;
}

@mixin mkdButtonMediumParams() {
    padding: 8px 31px;
    font-size: 12px;
}

@mixin mkdButtonLargeParams() {
    padding: 11px 47px;
    font-size: 14px;
}

@mixin mkdButtonHugeParams() {
    padding: 13px 57px;
    font-size: 14px;
}

/* Button mixins - end */

//vertical menu
@mixin vertical-menu-laptop-wide-landscape {
    @media only screen and (min-width: $vertical-menu-laptop-landscape) and (max-width: $vertical-menu-laptop-wide-landscape) {
        @content;
    }
}

@mixin vertical-menu-laptop-landscape {
    @media only screen and (min-width: $vertical-menu-ipad-landscape) and (max-width: $vertical-menu-laptop-landscape) {
        @content;
    }
}

@mixin vertical-menu-ipad-landscape {
    @media only screen and (min-width: $ipad-landscape) and (max-width: $vertical-menu-ipad-landscape) {
        @content;
    }
}

//media query mixins - start

@mixin laptop-landscape-large {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-large)) {
        @content;
    }
}

@mixin laptop-landscape-mac {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-mac)) {
        @content;
    }
}

@mixin laptop-landscape-medium {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-medium)) {
        @content;
    }
}

@mixin laptop-landscape {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape)) {
        @content;
    }
}

@mixin ipad-landscape {
    @media only screen and (max-width: map-get($breakpoints, ipad-landscape)) {
        @content;
    }
}

@mixin ipad-portrait {
    @media only screen and (max-width: map-get($breakpoints, ipad-portrait)) {
        @content;
    }
}

@mixin phone-landscape {
    @media only screen and (max-width: map-get($breakpoints, phone-landscape)) {
        @content;
    }
}

@mixin phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, phone-portrait)) {
        @content;
    }
}

@mixin smaller-phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, smaller-phone-portrait)) {
        @content;
    }
}

//media query mixins - end

//animation mixin - start

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content
    }
;
    @keyframes #{$name} {
        @content
    }
;
}

@mixin animation($name, $duration, $repeat, $timing, $delay) {
    -webkit-animation-name: $name;
    -webkit-animation-duration: $duration;
    -webkit-animation-iteration-count: $repeat;
    -webkit-animation-timing-function: $timing;
    -webkit-animation-delay: $delay;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-name: $name;
    animation-duration: $duration;
    animation-iteration-count: $repeat;
    animation-timing-function: $timing;
    animation-delay: $delay;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}

//animation mixin - end